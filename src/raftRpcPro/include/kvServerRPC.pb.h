// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvServerRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvServerRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvServerRPC_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvServerRPC_2eproto;
namespace raftKVRpcProtoc {
class GetArgs;
struct GetArgsDefaultTypeInternal;
extern GetArgsDefaultTypeInternal _GetArgs_default_instance_;
class GetReply;
struct GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class PutAppendArgs;
struct PutAppendArgsDefaultTypeInternal;
extern PutAppendArgsDefaultTypeInternal _PutAppendArgs_default_instance_;
class PutAppendReply;
struct PutAppendReplyDefaultTypeInternal;
extern PutAppendReplyDefaultTypeInternal _PutAppendReply_default_instance_;
}  // namespace raftKVRpcProtoc
PROTOBUF_NAMESPACE_OPEN
template<> ::raftKVRpcProtoc::GetArgs* Arena::CreateMaybeMessage<::raftKVRpcProtoc::GetArgs>(Arena*);
template<> ::raftKVRpcProtoc::GetReply* Arena::CreateMaybeMessage<::raftKVRpcProtoc::GetReply>(Arena*);
template<> ::raftKVRpcProtoc::PutAppendArgs* Arena::CreateMaybeMessage<::raftKVRpcProtoc::PutAppendArgs>(Arena*);
template<> ::raftKVRpcProtoc::PutAppendReply* Arena::CreateMaybeMessage<::raftKVRpcProtoc::PutAppendReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftKVRpcProtoc {

// ===================================================================

class GetArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProtoc.GetArgs) */ {
 public:
  inline GetArgs() : GetArgs(nullptr) {}
  ~GetArgs() override;
  explicit PROTOBUF_CONSTEXPR GetArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetArgs(const GetArgs& from);
  GetArgs(GetArgs&& from) noexcept
    : GetArgs() {
    *this = ::std::move(from);
  }

  inline GetArgs& operator=(const GetArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetArgs& operator=(GetArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetArgs* internal_default_instance() {
    return reinterpret_cast<const GetArgs*>(
               &_GetArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetArgs& a, GetArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(GetArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetArgs& from) {
    GetArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProtoc.GetArgs";
  }
  protected:
  explicit GetArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
  };
  // bytes Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes ClientId = 2;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int32 RequestId = 3;
  void clear_requestid();
  int32_t requestid() const;
  void set_requestid(int32_t value);
  private:
  int32_t _internal_requestid() const;
  void _internal_set_requestid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProtoc.GetArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
    int32_t requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// -------------------------------------------------------------------

class GetReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProtoc.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  ~GetReply() override;
  explicit PROTOBUF_CONSTEXPR GetReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReply(const GetReply& from);
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReply& from) {
    GetReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProtoc.GetReply";
  }
  protected:
  explicit GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes Err = 1;
  void clear_err();
  const std::string& err() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // bytes Value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProtoc.GetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// -------------------------------------------------------------------

class PutAppendArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProtoc.PutAppendArgs) */ {
 public:
  inline PutAppendArgs() : PutAppendArgs(nullptr) {}
  ~PutAppendArgs() override;
  explicit PROTOBUF_CONSTEXPR PutAppendArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutAppendArgs(const PutAppendArgs& from);
  PutAppendArgs(PutAppendArgs&& from) noexcept
    : PutAppendArgs() {
    *this = ::std::move(from);
  }

  inline PutAppendArgs& operator=(const PutAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutAppendArgs& operator=(PutAppendArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutAppendArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutAppendArgs* internal_default_instance() {
    return reinterpret_cast<const PutAppendArgs*>(
               &_PutAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutAppendArgs& a, PutAppendArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(PutAppendArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutAppendArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutAppendArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutAppendArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutAppendArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutAppendArgs& from) {
    PutAppendArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutAppendArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProtoc.PutAppendArgs";
  }
  protected:
  explicit PutAppendArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kOpFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kRequestIdFieldNumber = 5,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes Value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes Op = 3;
  void clear_op();
  const std::string& op() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // bytes ClientId = 4;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int32 RequestId = 5;
  void clear_requestid();
  int32_t requestid() const;
  void set_requestid(int32_t value);
  private:
  int32_t _internal_requestid() const;
  void _internal_set_requestid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProtoc.PutAppendArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
    int32_t requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// -------------------------------------------------------------------

class PutAppendReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProtoc.PutAppendReply) */ {
 public:
  inline PutAppendReply() : PutAppendReply(nullptr) {}
  ~PutAppendReply() override;
  explicit PROTOBUF_CONSTEXPR PutAppendReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutAppendReply(const PutAppendReply& from);
  PutAppendReply(PutAppendReply&& from) noexcept
    : PutAppendReply() {
    *this = ::std::move(from);
  }

  inline PutAppendReply& operator=(const PutAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutAppendReply& operator=(PutAppendReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutAppendReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutAppendReply* internal_default_instance() {
    return reinterpret_cast<const PutAppendReply*>(
               &_PutAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutAppendReply& a, PutAppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PutAppendReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutAppendReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutAppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutAppendReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutAppendReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutAppendReply& from) {
    PutAppendReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutAppendReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProtoc.PutAppendReply";
  }
  protected:
  explicit PutAppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // bytes Err = 1;
  void clear_err();
  const std::string& err() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProtoc.PutAppendReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// ===================================================================

class kvServerRpc_Stub;

class kvServerRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline kvServerRpc() {};
 public:
  virtual ~kvServerRpc();

  typedef kvServerRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void PutAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProtoc::PutAppendArgs* request,
                       ::raftKVRpcProtoc::PutAppendReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProtoc::GetArgs* request,
                       ::raftKVRpcProtoc::GetReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(kvServerRpc);
};

class kvServerRpc_Stub : public kvServerRpc {
 public:
  kvServerRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  kvServerRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~kvServerRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements kvServerRpc ------------------------------------------

  void PutAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProtoc::PutAppendArgs* request,
                       ::raftKVRpcProtoc::PutAppendReply* response,
                       ::google::protobuf::Closure* done);
  void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProtoc::GetArgs* request,
                       ::raftKVRpcProtoc::GetReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(kvServerRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetArgs

// bytes Key = 1;
inline void GetArgs::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GetArgs::key() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.GetArgs.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetArgs::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.GetArgs.Key)
}
inline std::string* GetArgs::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.GetArgs.Key)
  return _s;
}
inline const std::string& GetArgs::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GetArgs::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetArgs::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetArgs::release_key() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.GetArgs.Key)
  return _impl_.key_.Release();
}
inline void GetArgs::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.GetArgs.Key)
}

// bytes ClientId = 2;
inline void GetArgs::clear_clientid() {
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& GetArgs::clientid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.GetArgs.ClientId)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetArgs::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.GetArgs.ClientId)
}
inline std::string* GetArgs::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.GetArgs.ClientId)
  return _s;
}
inline const std::string& GetArgs::_internal_clientid() const {
  return _impl_.clientid_.Get();
}
inline void GetArgs::_internal_set_clientid(const std::string& value) {
  
  _impl_.clientid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetArgs::_internal_mutable_clientid() {
  
  return _impl_.clientid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetArgs::release_clientid() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.GetArgs.ClientId)
  return _impl_.clientid_.Release();
}
inline void GetArgs::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  _impl_.clientid_.SetAllocated(clientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.GetArgs.ClientId)
}

// int32 RequestId = 3;
inline void GetArgs::clear_requestid() {
  _impl_.requestid_ = 0;
}
inline int32_t GetArgs::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int32_t GetArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.GetArgs.RequestId)
  return _internal_requestid();
}
inline void GetArgs::_internal_set_requestid(int32_t value) {
  
  _impl_.requestid_ = value;
}
inline void GetArgs::set_requestid(int32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.GetArgs.RequestId)
}

// -------------------------------------------------------------------

// GetReply

// bytes Err = 1;
inline void GetReply::clear_err() {
  _impl_.err_.ClearToEmpty();
}
inline const std::string& GetReply::err() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.GetReply.Err)
  return _internal_err();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetReply::set_err(ArgT0&& arg0, ArgT... args) {
 
 _impl_.err_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.GetReply.Err)
}
inline std::string* GetReply::mutable_err() {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.GetReply.Err)
  return _s;
}
inline const std::string& GetReply::_internal_err() const {
  return _impl_.err_.Get();
}
inline void GetReply::_internal_set_err(const std::string& value) {
  
  _impl_.err_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReply::_internal_mutable_err() {
  
  return _impl_.err_.Mutable(GetArenaForAllocation());
}
inline std::string* GetReply::release_err() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.GetReply.Err)
  return _impl_.err_.Release();
}
inline void GetReply::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    
  } else {
    
  }
  _impl_.err_.SetAllocated(err, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.err_.IsDefault()) {
    _impl_.err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.GetReply.Err)
}

// bytes Value = 2;
inline void GetReply::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& GetReply::value() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.GetReply.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetReply::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.GetReply.Value)
}
inline std::string* GetReply::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.GetReply.Value)
  return _s;
}
inline const std::string& GetReply::_internal_value() const {
  return _impl_.value_.Get();
}
inline void GetReply::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReply::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* GetReply::release_value() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.GetReply.Value)
  return _impl_.value_.Release();
}
inline void GetReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.GetReply.Value)
}

// -------------------------------------------------------------------

// PutAppendArgs

// bytes key = 1;
inline void PutAppendArgs::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::key() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.PutAppendArgs.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutAppendArgs::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.PutAppendArgs.key)
}
inline std::string* PutAppendArgs::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.PutAppendArgs.key)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PutAppendArgs::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PutAppendArgs::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PutAppendArgs::release_key() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.PutAppendArgs.key)
  return _impl_.key_.Release();
}
inline void PutAppendArgs::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.PutAppendArgs.key)
}

// bytes Value = 2;
inline void PutAppendArgs::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::value() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.PutAppendArgs.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutAppendArgs::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.PutAppendArgs.Value)
}
inline std::string* PutAppendArgs::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.PutAppendArgs.Value)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_value() const {
  return _impl_.value_.Get();
}
inline void PutAppendArgs::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* PutAppendArgs::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* PutAppendArgs::release_value() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.PutAppendArgs.Value)
  return _impl_.value_.Release();
}
inline void PutAppendArgs::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.PutAppendArgs.Value)
}

// bytes Op = 3;
inline void PutAppendArgs::clear_op() {
  _impl_.op_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::op() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.PutAppendArgs.Op)
  return _internal_op();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutAppendArgs::set_op(ArgT0&& arg0, ArgT... args) {
 
 _impl_.op_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.PutAppendArgs.Op)
}
inline std::string* PutAppendArgs::mutable_op() {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.PutAppendArgs.Op)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_op() const {
  return _impl_.op_.Get();
}
inline void PutAppendArgs::_internal_set_op(const std::string& value) {
  
  _impl_.op_.Set(value, GetArenaForAllocation());
}
inline std::string* PutAppendArgs::_internal_mutable_op() {
  
  return _impl_.op_.Mutable(GetArenaForAllocation());
}
inline std::string* PutAppendArgs::release_op() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.PutAppendArgs.Op)
  return _impl_.op_.Release();
}
inline void PutAppendArgs::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  _impl_.op_.SetAllocated(op, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.op_.IsDefault()) {
    _impl_.op_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.PutAppendArgs.Op)
}

// bytes ClientId = 4;
inline void PutAppendArgs::clear_clientid() {
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& PutAppendArgs::clientid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.PutAppendArgs.ClientId)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutAppendArgs::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.PutAppendArgs.ClientId)
}
inline std::string* PutAppendArgs::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.PutAppendArgs.ClientId)
  return _s;
}
inline const std::string& PutAppendArgs::_internal_clientid() const {
  return _impl_.clientid_.Get();
}
inline void PutAppendArgs::_internal_set_clientid(const std::string& value) {
  
  _impl_.clientid_.Set(value, GetArenaForAllocation());
}
inline std::string* PutAppendArgs::_internal_mutable_clientid() {
  
  return _impl_.clientid_.Mutable(GetArenaForAllocation());
}
inline std::string* PutAppendArgs::release_clientid() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.PutAppendArgs.ClientId)
  return _impl_.clientid_.Release();
}
inline void PutAppendArgs::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  _impl_.clientid_.SetAllocated(clientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.PutAppendArgs.ClientId)
}

// int32 RequestId = 5;
inline void PutAppendArgs::clear_requestid() {
  _impl_.requestid_ = 0;
}
inline int32_t PutAppendArgs::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int32_t PutAppendArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.PutAppendArgs.RequestId)
  return _internal_requestid();
}
inline void PutAppendArgs::_internal_set_requestid(int32_t value) {
  
  _impl_.requestid_ = value;
}
inline void PutAppendArgs::set_requestid(int32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.PutAppendArgs.RequestId)
}

// -------------------------------------------------------------------

// PutAppendReply

// bytes Err = 1;
inline void PutAppendReply::clear_err() {
  _impl_.err_.ClearToEmpty();
}
inline const std::string& PutAppendReply::err() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProtoc.PutAppendReply.Err)
  return _internal_err();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutAppendReply::set_err(ArgT0&& arg0, ArgT... args) {
 
 _impl_.err_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftKVRpcProtoc.PutAppendReply.Err)
}
inline std::string* PutAppendReply::mutable_err() {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:raftKVRpcProtoc.PutAppendReply.Err)
  return _s;
}
inline const std::string& PutAppendReply::_internal_err() const {
  return _impl_.err_.Get();
}
inline void PutAppendReply::_internal_set_err(const std::string& value) {
  
  _impl_.err_.Set(value, GetArenaForAllocation());
}
inline std::string* PutAppendReply::_internal_mutable_err() {
  
  return _impl_.err_.Mutable(GetArenaForAllocation());
}
inline std::string* PutAppendReply::release_err() {
  // @@protoc_insertion_point(field_release:raftKVRpcProtoc.PutAppendReply.Err)
  return _impl_.err_.Release();
}
inline void PutAppendReply::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    
  } else {
    
  }
  _impl_.err_.SetAllocated(err, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.err_.IsDefault()) {
    _impl_.err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProtoc.PutAppendReply.Err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftKVRpcProtoc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto
