// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftRPC_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftRPC_2eproto;
namespace raftRpcProtoc {
class AppendEntriesArgs;
struct AppendEntriesArgsDefaultTypeInternal;
extern AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
class AppendEntriesReply;
struct AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class InstallSnapshotRequest;
struct InstallSnapshotRequestDefaultTypeInternal;
extern InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
class InstallSnapshotResponse;
struct InstallSnapshotResponseDefaultTypeInternal;
extern InstallSnapshotResponseDefaultTypeInternal _InstallSnapshotResponse_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestVoteArgs;
struct RequestVoteArgsDefaultTypeInternal;
extern RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
class RequestVoteReply;
struct RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
}  // namespace raftRpcProtoc
PROTOBUF_NAMESPACE_OPEN
template<> ::raftRpcProtoc::AppendEntriesArgs* Arena::CreateMaybeMessage<::raftRpcProtoc::AppendEntriesArgs>(Arena*);
template<> ::raftRpcProtoc::AppendEntriesReply* Arena::CreateMaybeMessage<::raftRpcProtoc::AppendEntriesReply>(Arena*);
template<> ::raftRpcProtoc::InstallSnapshotRequest* Arena::CreateMaybeMessage<::raftRpcProtoc::InstallSnapshotRequest>(Arena*);
template<> ::raftRpcProtoc::InstallSnapshotResponse* Arena::CreateMaybeMessage<::raftRpcProtoc::InstallSnapshotResponse>(Arena*);
template<> ::raftRpcProtoc::LogEntry* Arena::CreateMaybeMessage<::raftRpcProtoc::LogEntry>(Arena*);
template<> ::raftRpcProtoc::RequestVoteArgs* Arena::CreateMaybeMessage<::raftRpcProtoc::RequestVoteArgs>(Arena*);
template<> ::raftRpcProtoc::RequestVoteReply* Arena::CreateMaybeMessage<::raftRpcProtoc::RequestVoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftRpcProtoc {

// ===================================================================

class LogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  explicit PROTOBUF_CONSTEXPR LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogEntry& from) {
    LogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kLogTermFieldNumber = 2,
    kLogIndexFieldNumber = 3,
  };
  // bytes Command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int32 LogTerm = 2;
  void clear_logterm();
  int32_t logterm() const;
  void set_logterm(int32_t value);
  private:
  int32_t _internal_logterm() const;
  void _internal_set_logterm(int32_t value);
  public:

  // int32 LogIndex = 3;
  void clear_logindex();
  int32_t logindex() const;
  void set_logindex(int32_t value);
  private:
  int32_t _internal_logindex() const;
  void _internal_set_logindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    int32_t logterm_;
    int32_t logindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.AppendEntriesArgs) */ {
 public:
  inline AppendEntriesArgs() : AppendEntriesArgs(nullptr) {}
  ~AppendEntriesArgs() override;
  explicit PROTOBUF_CONSTEXPR AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesArgs(const AppendEntriesArgs& from);
  AppendEntriesArgs(AppendEntriesArgs&& from) noexcept
    : AppendEntriesArgs() {
    *this = ::std::move(from);
  }

  inline AppendEntriesArgs& operator=(const AppendEntriesArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesArgs& operator=(AppendEntriesArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesArgs* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesArgs*>(
               &_AppendEntriesArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendEntriesArgs& a, AppendEntriesArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendEntriesArgs& from) {
    AppendEntriesArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.AppendEntriesArgs";
  }
  protected:
  explicit AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .raftRpcProtoc.LogEntry Entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raftRpcProtoc::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcProtoc::LogEntry >*
      mutable_entries();
  private:
  const ::raftRpcProtoc::LogEntry& _internal_entries(int index) const;
  ::raftRpcProtoc::LogEntry* _internal_add_entries();
  public:
  const ::raftRpcProtoc::LogEntry& entries(int index) const;
  ::raftRpcProtoc::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcProtoc::LogEntry >&
      entries() const;

  // int32 Term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 LeaderId = 2;
  void clear_leaderid();
  int32_t leaderid() const;
  void set_leaderid(int32_t value);
  private:
  int32_t _internal_leaderid() const;
  void _internal_set_leaderid(int32_t value);
  public:

  // int32 PrevLogIndex = 3;
  void clear_prevlogindex();
  int32_t prevlogindex() const;
  void set_prevlogindex(int32_t value);
  private:
  int32_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(int32_t value);
  public:

  // int32 PrevLogTerm = 4;
  void clear_prevlogterm();
  int32_t prevlogterm() const;
  void set_prevlogterm(int32_t value);
  private:
  int32_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(int32_t value);
  public:

  // int32 LeaderCommit = 6;
  void clear_leadercommit();
  int32_t leadercommit() const;
  void set_leadercommit(int32_t value);
  private:
  int32_t _internal_leadercommit() const;
  void _internal_set_leadercommit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.AppendEntriesArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcProtoc::LogEntry > entries_;
    int32_t term_;
    int32_t leaderid_;
    int32_t prevlogindex_;
    int32_t prevlogterm_;
    int32_t leadercommit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.AppendEntriesReply) */ {
 public:
  inline AppendEntriesReply() : AppendEntriesReply(nullptr) {}
  ~AppendEntriesReply() override;
  explicit PROTOBUF_CONSTEXPR AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesReply(const AppendEntriesReply& from);
  AppendEntriesReply(AppendEntriesReply&& from) noexcept
    : AppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
               &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendEntriesReply& from) {
    AppendEntriesReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.AppendEntriesReply";
  }
  protected:
  explicit AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kUpdateNextIndexFieldNumber = 3,
    kAppStateFieldNumber = 4,
  };
  // int32 Term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool Success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 UpdateNextIndex = 3;
  void clear_updatenextindex();
  int32_t updatenextindex() const;
  void set_updatenextindex(int32_t value);
  private:
  int32_t _internal_updatenextindex() const;
  void _internal_set_updatenextindex(int32_t value);
  public:

  // int32 AppState = 4;
  void clear_appstate();
  int32_t appstate() const;
  void set_appstate(int32_t value);
  private:
  int32_t _internal_appstate() const;
  void _internal_set_appstate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.AppendEntriesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    bool success_;
    int32_t updatenextindex_;
    int32_t appstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.RequestVoteArgs) */ {
 public:
  inline RequestVoteArgs() : RequestVoteArgs(nullptr) {}
  ~RequestVoteArgs() override;
  explicit PROTOBUF_CONSTEXPR RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteArgs(const RequestVoteArgs& from);
  RequestVoteArgs(RequestVoteArgs&& from) noexcept
    : RequestVoteArgs() {
    *this = ::std::move(from);
  }

  inline RequestVoteArgs& operator=(const RequestVoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArgs& operator=(RequestVoteArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteArgs* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArgs*>(
               &_RequestVoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestVoteArgs& a, RequestVoteArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestVoteArgs& from) {
    RequestVoteArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.RequestVoteArgs";
  }
  protected:
  explicit RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int32 Term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 CandidateId = 2;
  void clear_candidateid();
  int32_t candidateid() const;
  void set_candidateid(int32_t value);
  private:
  int32_t _internal_candidateid() const;
  void _internal_set_candidateid(int32_t value);
  public:

  // int32 LastLogIndex = 3;
  void clear_lastlogindex();
  int32_t lastlogindex() const;
  void set_lastlogindex(int32_t value);
  private:
  int32_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(int32_t value);
  public:

  // int32 LastLogTerm = 4;
  void clear_lastlogterm();
  int32_t lastlogterm() const;
  void set_lastlogterm(int32_t value);
  private:
  int32_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.RequestVoteArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    int32_t candidateid_;
    int32_t lastlogindex_;
    int32_t lastlogterm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.RequestVoteReply) */ {
 public:
  inline RequestVoteReply() : RequestVoteReply(nullptr) {}
  ~RequestVoteReply() override;
  explicit PROTOBUF_CONSTEXPR RequestVoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestVoteReply& from) {
    RequestVoteReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.RequestVoteReply";
  }
  protected:
  explicit RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
    kVoteStateFieldNumber = 3,
  };
  // int32 Term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool VoteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // int32 VoteState = 3;
  void clear_votestate();
  int32_t votestate() const;
  void set_votestate(int32_t value);
  private:
  int32_t _internal_votestate() const;
  void _internal_set_votestate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.RequestVoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    bool votegranted_;
    int32_t votestate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.InstallSnapshotRequest) */ {
 public:
  inline InstallSnapshotRequest() : InstallSnapshotRequest(nullptr) {}
  ~InstallSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallSnapshotRequest(const InstallSnapshotRequest& from);
  InstallSnapshotRequest(InstallSnapshotRequest&& from) noexcept
    : InstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotRequest& operator=(const InstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotRequest& operator=(InstallSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotRequest*>(
               &_InstallSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InstallSnapshotRequest& a, InstallSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallSnapshotRequest& from) {
    InstallSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.InstallSnapshotRequest";
  }
  protected:
  explicit InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kLeaderIdFieldNumber = 1,
    kTermFieldNumber = 2,
    kLastSnapshotIncludeIndexFieldNumber = 3,
    kLastSnapshotIncludeTermFieldNumber = 4,
  };
  // bytes Data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 LeaderId = 1;
  void clear_leaderid();
  int32_t leaderid() const;
  void set_leaderid(int32_t value);
  private:
  int32_t _internal_leaderid() const;
  void _internal_set_leaderid(int32_t value);
  public:

  // int32 Term = 2;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 LastSnapshotIncludeIndex = 3;
  void clear_lastsnapshotincludeindex();
  int32_t lastsnapshotincludeindex() const;
  void set_lastsnapshotincludeindex(int32_t value);
  private:
  int32_t _internal_lastsnapshotincludeindex() const;
  void _internal_set_lastsnapshotincludeindex(int32_t value);
  public:

  // int32 LastSnapshotIncludeTerm = 4;
  void clear_lastsnapshotincludeterm();
  int32_t lastsnapshotincludeterm() const;
  void set_lastsnapshotincludeterm(int32_t value);
  private:
  int32_t _internal_lastsnapshotincludeterm() const;
  void _internal_set_lastsnapshotincludeterm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.InstallSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t leaderid_;
    int32_t term_;
    int32_t lastsnapshotincludeindex_;
    int32_t lastsnapshotincludeterm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcProtoc.InstallSnapshotResponse) */ {
 public:
  inline InstallSnapshotResponse() : InstallSnapshotResponse(nullptr) {}
  ~InstallSnapshotResponse() override;
  explicit PROTOBUF_CONSTEXPR InstallSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallSnapshotResponse(const InstallSnapshotResponse& from);
  InstallSnapshotResponse(InstallSnapshotResponse&& from) noexcept
    : InstallSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotResponse& operator=(const InstallSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotResponse& operator=(InstallSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotResponse*>(
               &_InstallSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InstallSnapshotResponse& a, InstallSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallSnapshotResponse& from) {
    InstallSnapshotResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcProtoc.InstallSnapshotResponse";
  }
  protected:
  explicit InstallSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
  };
  // int32 Term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcProtoc.InstallSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftRPC_2eproto;
};
// ===================================================================

class raftRpc_Stub;

class raftRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline raftRpc() {};
 public:
  virtual ~raftRpc();

  typedef raftRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcProtoc::AppendEntriesArgs* request,
                       ::raftRpcProtoc::AppendEntriesReply* response,
                       ::google::protobuf::Closure* done);
  virtual void InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcProtoc::InstallSnapshotRequest* request,
                       ::raftRpcProtoc::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcProtoc::RequestVoteArgs* request,
                       ::raftRpcProtoc::RequestVoteReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(raftRpc);
};

class raftRpc_Stub : public raftRpc {
 public:
  raftRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  raftRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~raftRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements raftRpc ------------------------------------------

  void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcProtoc::AppendEntriesArgs* request,
                       ::raftRpcProtoc::AppendEntriesReply* response,
                       ::google::protobuf::Closure* done);
  void InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcProtoc::InstallSnapshotRequest* request,
                       ::raftRpcProtoc::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcProtoc::RequestVoteArgs* request,
                       ::raftRpcProtoc::RequestVoteReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(raftRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// bytes Command = 1;
inline void LogEntry::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.LogEntry.Command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftRpcProtoc.LogEntry.Command)
}
inline std::string* LogEntry::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:raftRpcProtoc.LogEntry.Command)
  return _s;
}
inline const std::string& LogEntry::_internal_command() const {
  return _impl_.command_.Get();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:raftRpcProtoc.LogEntry.Command)
  return _impl_.command_.Release();
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftRpcProtoc.LogEntry.Command)
}

// int32 LogTerm = 2;
inline void LogEntry::clear_logterm() {
  _impl_.logterm_ = 0;
}
inline int32_t LogEntry::_internal_logterm() const {
  return _impl_.logterm_;
}
inline int32_t LogEntry::logterm() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.LogEntry.LogTerm)
  return _internal_logterm();
}
inline void LogEntry::_internal_set_logterm(int32_t value) {
  
  _impl_.logterm_ = value;
}
inline void LogEntry::set_logterm(int32_t value) {
  _internal_set_logterm(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.LogEntry.LogTerm)
}

// int32 LogIndex = 3;
inline void LogEntry::clear_logindex() {
  _impl_.logindex_ = 0;
}
inline int32_t LogEntry::_internal_logindex() const {
  return _impl_.logindex_;
}
inline int32_t LogEntry::logindex() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.LogEntry.LogIndex)
  return _internal_logindex();
}
inline void LogEntry::_internal_set_logindex(int32_t value) {
  
  _impl_.logindex_ = value;
}
inline void LogEntry::set_logindex(int32_t value) {
  _internal_set_logindex(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.LogEntry.LogIndex)
}

// -------------------------------------------------------------------

// AppendEntriesArgs

// int32 Term = 1;
inline void AppendEntriesArgs::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t AppendEntriesArgs::_internal_term() const {
  return _impl_.term_;
}
inline int32_t AppendEntriesArgs::term() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesArgs.Term)
  return _internal_term();
}
inline void AppendEntriesArgs::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void AppendEntriesArgs::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesArgs.Term)
}

// int32 LeaderId = 2;
inline void AppendEntriesArgs::clear_leaderid() {
  _impl_.leaderid_ = 0;
}
inline int32_t AppendEntriesArgs::_internal_leaderid() const {
  return _impl_.leaderid_;
}
inline int32_t AppendEntriesArgs::leaderid() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesArgs.LeaderId)
  return _internal_leaderid();
}
inline void AppendEntriesArgs::_internal_set_leaderid(int32_t value) {
  
  _impl_.leaderid_ = value;
}
inline void AppendEntriesArgs::set_leaderid(int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesArgs.LeaderId)
}

// int32 PrevLogIndex = 3;
inline void AppendEntriesArgs::clear_prevlogindex() {
  _impl_.prevlogindex_ = 0;
}
inline int32_t AppendEntriesArgs::_internal_prevlogindex() const {
  return _impl_.prevlogindex_;
}
inline int32_t AppendEntriesArgs::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesArgs.PrevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesArgs::_internal_set_prevlogindex(int32_t value) {
  
  _impl_.prevlogindex_ = value;
}
inline void AppendEntriesArgs::set_prevlogindex(int32_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesArgs.PrevLogIndex)
}

// int32 PrevLogTerm = 4;
inline void AppendEntriesArgs::clear_prevlogterm() {
  _impl_.prevlogterm_ = 0;
}
inline int32_t AppendEntriesArgs::_internal_prevlogterm() const {
  return _impl_.prevlogterm_;
}
inline int32_t AppendEntriesArgs::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesArgs.PrevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesArgs::_internal_set_prevlogterm(int32_t value) {
  
  _impl_.prevlogterm_ = value;
}
inline void AppendEntriesArgs::set_prevlogterm(int32_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesArgs.PrevLogTerm)
}

// repeated .raftRpcProtoc.LogEntry Entries = 5;
inline int AppendEntriesArgs::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int AppendEntriesArgs::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesArgs::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::raftRpcProtoc::LogEntry* AppendEntriesArgs::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftRpcProtoc.AppendEntriesArgs.Entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcProtoc::LogEntry >*
AppendEntriesArgs::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftRpcProtoc.AppendEntriesArgs.Entries)
  return &_impl_.entries_;
}
inline const ::raftRpcProtoc::LogEntry& AppendEntriesArgs::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::raftRpcProtoc::LogEntry& AppendEntriesArgs::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesArgs.Entries)
  return _internal_entries(index);
}
inline ::raftRpcProtoc::LogEntry* AppendEntriesArgs::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::raftRpcProtoc::LogEntry* AppendEntriesArgs::add_entries() {
  ::raftRpcProtoc::LogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:raftRpcProtoc.AppendEntriesArgs.Entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcProtoc::LogEntry >&
AppendEntriesArgs::entries() const {
  // @@protoc_insertion_point(field_list:raftRpcProtoc.AppendEntriesArgs.Entries)
  return _impl_.entries_;
}

// int32 LeaderCommit = 6;
inline void AppendEntriesArgs::clear_leadercommit() {
  _impl_.leadercommit_ = 0;
}
inline int32_t AppendEntriesArgs::_internal_leadercommit() const {
  return _impl_.leadercommit_;
}
inline int32_t AppendEntriesArgs::leadercommit() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesArgs.LeaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesArgs::_internal_set_leadercommit(int32_t value) {
  
  _impl_.leadercommit_ = value;
}
inline void AppendEntriesArgs::set_leadercommit(int32_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesArgs.LeaderCommit)
}

// -------------------------------------------------------------------

// AppendEntriesReply

// int32 Term = 1;
inline void AppendEntriesReply::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t AppendEntriesReply::_internal_term() const {
  return _impl_.term_;
}
inline int32_t AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesReply.Term)
  return _internal_term();
}
inline void AppendEntriesReply::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void AppendEntriesReply::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesReply.Term)
}

// bool Success = 2;
inline void AppendEntriesReply::clear_success() {
  _impl_.success_ = false;
}
inline bool AppendEntriesReply::_internal_success() const {
  return _impl_.success_;
}
inline bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesReply.Success)
  return _internal_success();
}
inline void AppendEntriesReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AppendEntriesReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesReply.Success)
}

// int32 UpdateNextIndex = 3;
inline void AppendEntriesReply::clear_updatenextindex() {
  _impl_.updatenextindex_ = 0;
}
inline int32_t AppendEntriesReply::_internal_updatenextindex() const {
  return _impl_.updatenextindex_;
}
inline int32_t AppendEntriesReply::updatenextindex() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesReply.UpdateNextIndex)
  return _internal_updatenextindex();
}
inline void AppendEntriesReply::_internal_set_updatenextindex(int32_t value) {
  
  _impl_.updatenextindex_ = value;
}
inline void AppendEntriesReply::set_updatenextindex(int32_t value) {
  _internal_set_updatenextindex(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesReply.UpdateNextIndex)
}

// int32 AppState = 4;
inline void AppendEntriesReply::clear_appstate() {
  _impl_.appstate_ = 0;
}
inline int32_t AppendEntriesReply::_internal_appstate() const {
  return _impl_.appstate_;
}
inline int32_t AppendEntriesReply::appstate() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.AppendEntriesReply.AppState)
  return _internal_appstate();
}
inline void AppendEntriesReply::_internal_set_appstate(int32_t value) {
  
  _impl_.appstate_ = value;
}
inline void AppendEntriesReply::set_appstate(int32_t value) {
  _internal_set_appstate(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.AppendEntriesReply.AppState)
}

// -------------------------------------------------------------------

// RequestVoteArgs

// int32 Term = 1;
inline void RequestVoteArgs::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t RequestVoteArgs::_internal_term() const {
  return _impl_.term_;
}
inline int32_t RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteArgs.Term)
  return _internal_term();
}
inline void RequestVoteArgs::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void RequestVoteArgs::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteArgs.Term)
}

// int32 CandidateId = 2;
inline void RequestVoteArgs::clear_candidateid() {
  _impl_.candidateid_ = 0;
}
inline int32_t RequestVoteArgs::_internal_candidateid() const {
  return _impl_.candidateid_;
}
inline int32_t RequestVoteArgs::candidateid() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteArgs.CandidateId)
  return _internal_candidateid();
}
inline void RequestVoteArgs::_internal_set_candidateid(int32_t value) {
  
  _impl_.candidateid_ = value;
}
inline void RequestVoteArgs::set_candidateid(int32_t value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteArgs.CandidateId)
}

// int32 LastLogIndex = 3;
inline void RequestVoteArgs::clear_lastlogindex() {
  _impl_.lastlogindex_ = 0;
}
inline int32_t RequestVoteArgs::_internal_lastlogindex() const {
  return _impl_.lastlogindex_;
}
inline int32_t RequestVoteArgs::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteArgs.LastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteArgs::_internal_set_lastlogindex(int32_t value) {
  
  _impl_.lastlogindex_ = value;
}
inline void RequestVoteArgs::set_lastlogindex(int32_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteArgs.LastLogIndex)
}

// int32 LastLogTerm = 4;
inline void RequestVoteArgs::clear_lastlogterm() {
  _impl_.lastlogterm_ = 0;
}
inline int32_t RequestVoteArgs::_internal_lastlogterm() const {
  return _impl_.lastlogterm_;
}
inline int32_t RequestVoteArgs::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteArgs.LastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteArgs::_internal_set_lastlogterm(int32_t value) {
  
  _impl_.lastlogterm_ = value;
}
inline void RequestVoteArgs::set_lastlogterm(int32_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteArgs.LastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteReply

// int32 Term = 1;
inline void RequestVoteReply::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t RequestVoteReply::_internal_term() const {
  return _impl_.term_;
}
inline int32_t RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteReply.Term)
  return _internal_term();
}
inline void RequestVoteReply::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void RequestVoteReply::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteReply.Term)
}

// bool VoteGranted = 2;
inline void RequestVoteReply::clear_votegranted() {
  _impl_.votegranted_ = false;
}
inline bool RequestVoteReply::_internal_votegranted() const {
  return _impl_.votegranted_;
}
inline bool RequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteReply.VoteGranted)
  return _internal_votegranted();
}
inline void RequestVoteReply::_internal_set_votegranted(bool value) {
  
  _impl_.votegranted_ = value;
}
inline void RequestVoteReply::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteReply.VoteGranted)
}

// int32 VoteState = 3;
inline void RequestVoteReply::clear_votestate() {
  _impl_.votestate_ = 0;
}
inline int32_t RequestVoteReply::_internal_votestate() const {
  return _impl_.votestate_;
}
inline int32_t RequestVoteReply::votestate() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.RequestVoteReply.VoteState)
  return _internal_votestate();
}
inline void RequestVoteReply::_internal_set_votestate(int32_t value) {
  
  _impl_.votestate_ = value;
}
inline void RequestVoteReply::set_votestate(int32_t value) {
  _internal_set_votestate(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.RequestVoteReply.VoteState)
}

// -------------------------------------------------------------------

// InstallSnapshotRequest

// int32 LeaderId = 1;
inline void InstallSnapshotRequest::clear_leaderid() {
  _impl_.leaderid_ = 0;
}
inline int32_t InstallSnapshotRequest::_internal_leaderid() const {
  return _impl_.leaderid_;
}
inline int32_t InstallSnapshotRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.InstallSnapshotRequest.LeaderId)
  return _internal_leaderid();
}
inline void InstallSnapshotRequest::_internal_set_leaderid(int32_t value) {
  
  _impl_.leaderid_ = value;
}
inline void InstallSnapshotRequest::set_leaderid(int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.InstallSnapshotRequest.LeaderId)
}

// int32 Term = 2;
inline void InstallSnapshotRequest::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t InstallSnapshotRequest::_internal_term() const {
  return _impl_.term_;
}
inline int32_t InstallSnapshotRequest::term() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.InstallSnapshotRequest.Term)
  return _internal_term();
}
inline void InstallSnapshotRequest::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void InstallSnapshotRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.InstallSnapshotRequest.Term)
}

// int32 LastSnapshotIncludeIndex = 3;
inline void InstallSnapshotRequest::clear_lastsnapshotincludeindex() {
  _impl_.lastsnapshotincludeindex_ = 0;
}
inline int32_t InstallSnapshotRequest::_internal_lastsnapshotincludeindex() const {
  return _impl_.lastsnapshotincludeindex_;
}
inline int32_t InstallSnapshotRequest::lastsnapshotincludeindex() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.InstallSnapshotRequest.LastSnapshotIncludeIndex)
  return _internal_lastsnapshotincludeindex();
}
inline void InstallSnapshotRequest::_internal_set_lastsnapshotincludeindex(int32_t value) {
  
  _impl_.lastsnapshotincludeindex_ = value;
}
inline void InstallSnapshotRequest::set_lastsnapshotincludeindex(int32_t value) {
  _internal_set_lastsnapshotincludeindex(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.InstallSnapshotRequest.LastSnapshotIncludeIndex)
}

// int32 LastSnapshotIncludeTerm = 4;
inline void InstallSnapshotRequest::clear_lastsnapshotincludeterm() {
  _impl_.lastsnapshotincludeterm_ = 0;
}
inline int32_t InstallSnapshotRequest::_internal_lastsnapshotincludeterm() const {
  return _impl_.lastsnapshotincludeterm_;
}
inline int32_t InstallSnapshotRequest::lastsnapshotincludeterm() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.InstallSnapshotRequest.LastSnapshotIncludeTerm)
  return _internal_lastsnapshotincludeterm();
}
inline void InstallSnapshotRequest::_internal_set_lastsnapshotincludeterm(int32_t value) {
  
  _impl_.lastsnapshotincludeterm_ = value;
}
inline void InstallSnapshotRequest::set_lastsnapshotincludeterm(int32_t value) {
  _internal_set_lastsnapshotincludeterm(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.InstallSnapshotRequest.LastSnapshotIncludeTerm)
}

// bytes Data = 5;
inline void InstallSnapshotRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& InstallSnapshotRequest::data() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.InstallSnapshotRequest.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstallSnapshotRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftRpcProtoc.InstallSnapshotRequest.Data)
}
inline std::string* InstallSnapshotRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:raftRpcProtoc.InstallSnapshotRequest.Data)
  return _s;
}
inline const std::string& InstallSnapshotRequest::_internal_data() const {
  return _impl_.data_.Get();
}
inline void InstallSnapshotRequest::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* InstallSnapshotRequest::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* InstallSnapshotRequest::release_data() {
  // @@protoc_insertion_point(field_release:raftRpcProtoc.InstallSnapshotRequest.Data)
  return _impl_.data_.Release();
}
inline void InstallSnapshotRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftRpcProtoc.InstallSnapshotRequest.Data)
}

// -------------------------------------------------------------------

// InstallSnapshotResponse

// int32 Term = 1;
inline void InstallSnapshotResponse::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t InstallSnapshotResponse::_internal_term() const {
  return _impl_.term_;
}
inline int32_t InstallSnapshotResponse::term() const {
  // @@protoc_insertion_point(field_get:raftRpcProtoc.InstallSnapshotResponse.Term)
  return _internal_term();
}
inline void InstallSnapshotResponse::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void InstallSnapshotResponse::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcProtoc.InstallSnapshotResponse.Term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftRpcProtoc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftRPC_2eproto
