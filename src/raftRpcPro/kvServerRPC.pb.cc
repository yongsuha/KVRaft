// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvServerRPC.proto

#include "kvServerRPC.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raftKVRpcProtoc {
PROTOBUF_CONSTEXPR GetArgs::GetArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetArgsDefaultTypeInternal() {}
  union {
    GetArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetArgsDefaultTypeInternal _GetArgs_default_instance_;
PROTOBUF_CONSTEXPR GetReply::GetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReplyDefaultTypeInternal() {}
  union {
    GetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReplyDefaultTypeInternal _GetReply_default_instance_;
PROTOBUF_CONSTEXPR PutAppendArgs::PutAppendArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutAppendArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutAppendArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutAppendArgsDefaultTypeInternal() {}
  union {
    PutAppendArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutAppendArgsDefaultTypeInternal _PutAppendArgs_default_instance_;
PROTOBUF_CONSTEXPR PutAppendReply::PutAppendReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutAppendReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutAppendReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutAppendReplyDefaultTypeInternal() {}
  union {
    PutAppendReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutAppendReplyDefaultTypeInternal _PutAppendReply_default_instance_;
}  // namespace raftKVRpcProtoc
static ::_pb::Metadata file_level_metadata_kvServerRPC_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_kvServerRPC_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_kvServerRPC_2eproto[1];

const uint32_t TableStruct_kvServerRPC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetArgs, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetArgs, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetArgs, _impl_.requestid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetReply, _impl_.err_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::GetReply, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendArgs, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendArgs, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendArgs, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendArgs, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendArgs, _impl_.requestid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftKVRpcProtoc::PutAppendReply, _impl_.err_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raftKVRpcProtoc::GetArgs)},
  { 9, -1, -1, sizeof(::raftKVRpcProtoc::GetReply)},
  { 17, -1, -1, sizeof(::raftKVRpcProtoc::PutAppendArgs)},
  { 28, -1, -1, sizeof(::raftKVRpcProtoc::PutAppendReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raftKVRpcProtoc::_GetArgs_default_instance_._instance,
  &::raftKVRpcProtoc::_GetReply_default_instance_._instance,
  &::raftKVRpcProtoc::_PutAppendArgs_default_instance_._instance,
  &::raftKVRpcProtoc::_PutAppendReply_default_instance_._instance,
};

const char descriptor_table_protodef_kvServerRPC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021kvServerRPC.proto\022\017raftKVRpcProtoc\";\n\007"
  "GetArgs\022\013\n\003Key\030\001 \001(\014\022\020\n\010ClientId\030\002 \001(\014\022\021"
  "\n\tRequestId\030\003 \001(\005\"&\n\010GetReply\022\013\n\003Err\030\001 \001"
  "(\014\022\r\n\005Value\030\002 \001(\014\"\\\n\rPutAppendArgs\022\013\n\003ke"
  "y\030\001 \001(\014\022\r\n\005Value\030\002 \001(\014\022\n\n\002Op\030\003 \001(\014\022\020\n\010Cl"
  "ientId\030\004 \001(\014\022\021\n\tRequestId\030\005 \001(\005\"\035\n\016PutAp"
  "pendReply\022\013\n\003Err\030\001 \001(\0142\227\001\n\013kvServerRpc\022L"
  "\n\tPutAppend\022\036.raftKVRpcProtoc.PutAppendA"
  "rgs\032\037.raftKVRpcProtoc.PutAppendReply\022:\n\003"
  "Get\022\030.raftKVRpcProtoc.GetArgs\032\031.raftKVRp"
  "cProtoc.GetReplyB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_kvServerRPC_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kvServerRPC_2eproto = {
    false, false, 429, descriptor_table_protodef_kvServerRPC_2eproto,
    "kvServerRPC.proto",
    &descriptor_table_kvServerRPC_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_kvServerRPC_2eproto::offsets,
    file_level_metadata_kvServerRPC_2eproto, file_level_enum_descriptors_kvServerRPC_2eproto,
    file_level_service_descriptors_kvServerRPC_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kvServerRPC_2eproto_getter() {
  return &descriptor_table_kvServerRPC_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kvServerRPC_2eproto(&descriptor_table_kvServerRPC_2eproto);
namespace raftKVRpcProtoc {

// ===================================================================

class GetArgs::_Internal {
 public:
};

GetArgs::GetArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raftKVRpcProtoc.GetArgs)
}
GetArgs::GetArgs(const GetArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.requestid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:raftKVRpcProtoc.GetArgs)
}

inline void GetArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.requestid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetArgs::~GetArgs() {
  // @@protoc_insertion_point(destructor:raftKVRpcProtoc.GetArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.clientid_.Destroy();
}

void GetArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:raftKVRpcProtoc.GetArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.clientid_.ClearToEmpty();
  _impl_.requestid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ClientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RequestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftKVRpcProtoc.GetArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes ClientId = 2;
  if (!this->_internal_clientid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // int32 RequestId = 3;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftKVRpcProtoc.GetArgs)
  return target;
}

size_t GetArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftKVRpcProtoc.GetArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes ClientId = 2;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientid());
  }

  // int32 RequestId = 3;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetArgs::GetClassData() const { return &_class_data_; }


void GetArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetArgs*>(&to_msg);
  auto& from = static_cast<const GetArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raftKVRpcProtoc.GetArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_requestid() != 0) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetArgs::CopyFrom(const GetArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftKVRpcProtoc.GetArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArgs::IsInitialized() const {
  return true;
}

void GetArgs::InternalSwap(GetArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvServerRPC_2eproto_getter, &descriptor_table_kvServerRPC_2eproto_once,
      file_level_metadata_kvServerRPC_2eproto[0]);
}

// ===================================================================

class GetReply::_Internal {
 public:
};

GetReply::GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raftKVRpcProtoc.GetReply)
}
GetReply::GetReply(const GetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err().empty()) {
    _this->_impl_.err_.Set(from._internal_err(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:raftKVRpcProtoc.GetReply)
}

inline void GetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetReply::~GetReply() {
  // @@protoc_insertion_point(destructor:raftKVRpcProtoc.GetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_.Destroy();
  _impl_.value_.Destroy();
}

void GetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raftKVRpcProtoc.GetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftKVRpcProtoc.GetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Err = 1;
  if (!this->_internal_err().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_err(), target);
  }

  // bytes Value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftKVRpcProtoc.GetReply)
  return target;
}

size_t GetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftKVRpcProtoc.GetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Err = 1;
  if (!this->_internal_err().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_err());
  }

  // bytes Value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReply::GetClassData() const { return &_class_data_; }


void GetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetReply*>(&to_msg);
  auto& from = static_cast<const GetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raftKVRpcProtoc.GetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err().empty()) {
    _this->_internal_set_err(from._internal_err());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReply::CopyFrom(const GetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftKVRpcProtoc.GetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReply::IsInitialized() const {
  return true;
}

void GetReply::InternalSwap(GetReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.err_, lhs_arena,
      &other->_impl_.err_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvServerRPC_2eproto_getter, &descriptor_table_kvServerRPC_2eproto_once,
      file_level_metadata_kvServerRPC_2eproto[1]);
}

// ===================================================================

class PutAppendArgs::_Internal {
 public:
};

PutAppendArgs::PutAppendArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raftKVRpcProtoc.PutAppendArgs)
}
PutAppendArgs::PutAppendArgs(const PutAppendArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutAppendArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.requestid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op().empty()) {
    _this->_impl_.op_.Set(from._internal_op(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:raftKVRpcProtoc.PutAppendArgs)
}

inline void PutAppendArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.requestid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutAppendArgs::~PutAppendArgs() {
  // @@protoc_insertion_point(destructor:raftKVRpcProtoc.PutAppendArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutAppendArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  _impl_.op_.Destroy();
  _impl_.clientid_.Destroy();
}

void PutAppendArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutAppendArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:raftKVRpcProtoc.PutAppendArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.op_.ClearToEmpty();
  _impl_.clientid_.ClearToEmpty();
  _impl_.requestid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutAppendArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_op();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ClientId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RequestId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutAppendArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftKVRpcProtoc.PutAppendArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes Value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bytes Op = 3;
  if (!this->_internal_op().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_op(), target);
  }

  // bytes ClientId = 4;
  if (!this->_internal_clientid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_clientid(), target);
  }

  // int32 RequestId = 5;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftKVRpcProtoc.PutAppendArgs)
  return target;
}

size_t PutAppendArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftKVRpcProtoc.PutAppendArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes Value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes Op = 3;
  if (!this->_internal_op().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_op());
  }

  // bytes ClientId = 4;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientid());
  }

  // int32 RequestId = 5;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutAppendArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutAppendArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutAppendArgs::GetClassData() const { return &_class_data_; }


void PutAppendArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutAppendArgs*>(&to_msg);
  auto& from = static_cast<const PutAppendArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raftKVRpcProtoc.PutAppendArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_op().empty()) {
    _this->_internal_set_op(from._internal_op());
  }
  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_requestid() != 0) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutAppendArgs::CopyFrom(const PutAppendArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftKVRpcProtoc.PutAppendArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutAppendArgs::IsInitialized() const {
  return true;
}

void PutAppendArgs::InternalSwap(PutAppendArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_, lhs_arena,
      &other->_impl_.op_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutAppendArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvServerRPC_2eproto_getter, &descriptor_table_kvServerRPC_2eproto_once,
      file_level_metadata_kvServerRPC_2eproto[2]);
}

// ===================================================================

class PutAppendReply::_Internal {
 public:
};

PutAppendReply::PutAppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raftKVRpcProtoc.PutAppendReply)
}
PutAppendReply::PutAppendReply(const PutAppendReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutAppendReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err().empty()) {
    _this->_impl_.err_.Set(from._internal_err(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:raftKVRpcProtoc.PutAppendReply)
}

inline void PutAppendReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutAppendReply::~PutAppendReply() {
  // @@protoc_insertion_point(destructor:raftKVRpcProtoc.PutAppendReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutAppendReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_.Destroy();
}

void PutAppendReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutAppendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raftKVRpcProtoc.PutAppendReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutAppendReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutAppendReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftKVRpcProtoc.PutAppendReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Err = 1;
  if (!this->_internal_err().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftKVRpcProtoc.PutAppendReply)
  return target;
}

size_t PutAppendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftKVRpcProtoc.PutAppendReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Err = 1;
  if (!this->_internal_err().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutAppendReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutAppendReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutAppendReply::GetClassData() const { return &_class_data_; }


void PutAppendReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutAppendReply*>(&to_msg);
  auto& from = static_cast<const PutAppendReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raftKVRpcProtoc.PutAppendReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err().empty()) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutAppendReply::CopyFrom(const PutAppendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftKVRpcProtoc.PutAppendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutAppendReply::IsInitialized() const {
  return true;
}

void PutAppendReply::InternalSwap(PutAppendReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.err_, lhs_arena,
      &other->_impl_.err_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PutAppendReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvServerRPC_2eproto_getter, &descriptor_table_kvServerRPC_2eproto_once,
      file_level_metadata_kvServerRPC_2eproto[3]);
}

// ===================================================================

kvServerRpc::~kvServerRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* kvServerRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvServerRPC_2eproto);
  return file_level_service_descriptors_kvServerRPC_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* kvServerRpc::GetDescriptor() {
  return descriptor();
}

void kvServerRpc::PutAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftKVRpcProtoc::PutAppendArgs*,
                         ::raftKVRpcProtoc::PutAppendReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PutAppend() not implemented.");
  done->Run();
}

void kvServerRpc::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftKVRpcProtoc::GetArgs*,
                         ::raftKVRpcProtoc::GetReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void kvServerRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_kvServerRPC_2eproto[0]);
  switch(method->index()) {
    case 0:
      PutAppend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftKVRpcProtoc::PutAppendArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftKVRpcProtoc::PutAppendReply*>(
                 response),
             done);
      break;
    case 1:
      Get(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftKVRpcProtoc::GetArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftKVRpcProtoc::GetReply*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& kvServerRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftKVRpcProtoc::PutAppendArgs::default_instance();
    case 1:
      return ::raftKVRpcProtoc::GetArgs::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& kvServerRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftKVRpcProtoc::PutAppendReply::default_instance();
    case 1:
      return ::raftKVRpcProtoc::GetReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

kvServerRpc_Stub::kvServerRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
kvServerRpc_Stub::kvServerRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
kvServerRpc_Stub::~kvServerRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void kvServerRpc_Stub::PutAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftKVRpcProtoc::PutAppendArgs* request,
                              ::raftKVRpcProtoc::PutAppendReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void kvServerRpc_Stub::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftKVRpcProtoc::GetArgs* request,
                              ::raftKVRpcProtoc::GetReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raftKVRpcProtoc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raftKVRpcProtoc::GetArgs*
Arena::CreateMaybeMessage< ::raftKVRpcProtoc::GetArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftKVRpcProtoc::GetArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::raftKVRpcProtoc::GetReply*
Arena::CreateMaybeMessage< ::raftKVRpcProtoc::GetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftKVRpcProtoc::GetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::raftKVRpcProtoc::PutAppendArgs*
Arena::CreateMaybeMessage< ::raftKVRpcProtoc::PutAppendArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftKVRpcProtoc::PutAppendArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::raftKVRpcProtoc::PutAppendReply*
Arena::CreateMaybeMessage< ::raftKVRpcProtoc::PutAppendReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftKVRpcProtoc::PutAppendReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
